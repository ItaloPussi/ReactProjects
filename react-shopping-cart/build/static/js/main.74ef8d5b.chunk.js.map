{"version":3,"sources":["Item/Item.styles.ts","Item/Item.tsx","CartItem/CartItem.styles.ts","CartItem/CartItem.tsx","Cart/Cart.styles.ts","Cart/Cart.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","Item","item","handleAddToCart","src","image","alt","title","description","price","Button","onClick","CartItem","addToCart","removeFromCart","className","amount","toFixed","size","disableElevation","variant","id","aside","Cart","items","cartItems","length","map","reduce","ack","StyledButton","IconButton","getProducts","a","fetch","json","App","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","console","log","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"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","file":"static/js/main.74ef8d5b.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    border: 1px solid lightblue;\r\n    border-radius: 20px;\r\n    height: 100%;\r\n    flex-direction: column;\r\n\r\n    button {\r\n        border-radius: 0 0 20px 20px;\r\n    }\r\n\r\n    img {\r\n        max-height: 250px;\r\n        object-fit: cover;\r\n        border-radius: 20px 20px 0 0;\r\n    }\r\n\r\n    div {\r\n        font-family: Arial, Helvetica, sans-serif;\r\n        padding: 1rem;\r\n        height: 100%;\r\n    }\r\n`;","import Button from '@material-ui/core/Button'\r\n\r\n// Types\r\nimport {CartItemType} from '../App'\r\n\r\n// Styles\r\nimport {Wrapper} from './Item.styles'\r\n\r\ntype Props = {\r\n    item: CartItemType;\r\n    handleAddToCart: (clickedItem: CartItemType) => void;\r\n}\r\n\r\nconst Item: React.FC<Props> = ({item, handleAddToCart}) => (\r\n    <Wrapper>\r\n        <img src={item.image} alt={item.title} />\r\n        <div>\r\n            <h3>{item.title}</h3>\r\n            <p>{item.description}</p>\r\n            <h3>${item.price}</h3>\r\n        </div>\r\n        <Button onClick={()=>handleAddToCart(item)}>Add to cart</Button>\r\n    </Wrapper>\r\n)\r\n\r\nexport default Item","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    border-bottom: 1px solid lightblue;\r\n\r\n    div {\r\n        flex: 1;\r\n    }\r\n\r\n    .information, .buttons {\r\n        display: flex;\r\n        justify-content: space-between;\r\n    }\r\n\r\n    img {\r\n        max-width: 80px;\r\n        object-fit: cover;\r\n        margin-left: 40px;\r\n    }\r\n`","import Button from '@material-ui/core/Button'\r\n\r\n// Types\r\nimport {CartItemType} from '../App'\r\n\r\n// Styles\r\nimport {Wrapper} from './CartItem.styles'\r\n\r\ntype Props = {\r\n    item: CartItemType;\r\n    addToCart: (clickedItem: CartItemType) => void;\r\n    removeFromCart: (id: number) => void;\r\n}\r\nconst CartItem: React.FC<Props> = ({item, addToCart, removeFromCart}) => (\r\n    <Wrapper>\r\n        <div>\r\n            <h3>{item.title}</h3>\r\n            <div className=\"information\">\r\n                <p>Price: ${item.price}</p>\r\n                <p>Total: ${(item.amount * item.price).toFixed(2)}</p>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <Button \r\n                    size=\"small\" \r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={() => removeFromCart(item.id)}\r\n                >\r\n                    -\r\n                </Button>\r\n                <p>{item.amount}</p>\r\n                <Button \r\n                    size=\"small\" \r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={() => addToCart(item)}\r\n                >\r\n                    +\r\n                </Button>\r\n            </div>\r\n        </div>\r\n        <img src={item.image} alt={item.title} />\r\n    </Wrapper>\r\n)\r\n\r\nexport default CartItem","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.aside`\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    width: 500px;\r\n    padding: 20px;\r\n`","import CartItem from '../CartItem/CartItem'\r\nimport {Wrapper} from './Cart.styles'\r\nimport {CartItemType} from '../App'\r\n\r\ntype Props = {\r\n    cartItems: CartItemType[];\r\n    addToCart: (clickedItem: CartItemType) => void;\r\n    removeFromCart: (id: number) => void;\r\n}\r\n\r\nconst Cart: React.FC<Props> = ({cartItems, addToCart, removeFromCart}) => {\r\n    const calculateTotal = (items: CartItemType[]) => (\r\n        items.reduce((ack:number, item) => ack + item.amount * item.price, 0)\r\n    )\r\n    return (\r\n        <Wrapper>\r\n            <h2>Your Shopping Cart</h2>\r\n            {cartItems.length === 0 ? <p>No items in cart</p> : null}\r\n            {cartItems.map(item => (\r\n                <CartItem \r\n                    key={item.id}\r\n                    item={item}\r\n                    addToCart={addToCart}\r\n                    removeFromCart={removeFromCart}\r\n                />\r\n            ))}\r\n            <h2>Total: ${calculateTotal(cartItems).toFixed(2)}</h2>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Cart","import styled from 'styled-components'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nexport const Wrapper = styled.div`\r\n    margin: 40px;\r\n`\r\n\r\nexport const StyledButton = styled(IconButton)`\r\n    position: fixed;\r\n    z-index: 100;\r\n    right: 20px;\r\n    top: 20px;\r\n`","import {useState, useEffect} from 'react'\nimport {useQuery} from 'react-query'\n\n// Components\nimport Item from './Item/Item'\nimport Cart from './Cart/Cart'\nimport Drawer from '@material-ui/core/Drawer'\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport Grid from \"@material-ui/core/Grid\"\nimport AddShoppingCartIcon from \"@material-ui/icons/AddShoppingCart\"\nimport Badge from \"@material-ui/core/Badge\"\n\n// Styles\nimport {Wrapper, StyledButton} from './App.styles'\n\n// Types\nexport type CartItemType = {\n  id: number;\n  category: string;\n  description: string;\n  image: string;\n  price: number;\n  title: string;\n  amount: number;\n}\n\nconst getProducts = async() : Promise<CartItemType[]> => \n  await (await fetch(\"https://fakestoreapi.com/products\")).json()\n\n\nconst App = () => {\n  const [cartOpen, setCartOpen] = useState(false)\n  const [cartItems, setCartItems] = useState([] as CartItemType[])\n  const {data, isLoading, error} = useQuery<CartItemType[]>('products', getProducts)\n  console.log(data)\n\n  const getTotalItems = (items: CartItemType[]) => (\n    items.reduce((ack:number, item) => ack + item.amount, 0)\n  );\n\n  const handleAddToCart = (clickedItem: CartItemType) => {\n    setCartItems(prev => {\n      // 1. Is the item already added in the cart?\n      const isItemInCart = prev.find(item=>item.id === clickedItem.id)\n\n      if (isItemInCart) {\n        return prev.map(item => (\n          item.id === clickedItem.id\n            ? {...item, amount: item.amount+1}\n            : item\n        ))\n      }\n\n      // FIrst time the item is added\n      return [...prev, {...clickedItem,  amount: 1}]\n\n    })\n  };\n\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems(prev => (\n      prev.reduce((ack, item) => {\n        if (item.id === id) {\n          if(item.amount == 1) return ack;\n          return [...ack, { ...item, amount: item.amount-1}]\n        }\n        return [...ack, item]\n      }, [] as CartItemType[])\n    ))\n  };\n\n  if (isLoading) return <LinearProgress />\n  if(error) return <div>Something went wrong...</div>\n\n  return (\n    <Wrapper>\n      <Drawer anchor=\"right\" open={cartOpen} onClose={()=> setCartOpen(false)}>\n        <Cart cartItems ={cartItems} addToCart={handleAddToCart} removeFromCart={handleRemoveFromCart} />\n      </Drawer>\n\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color=\"error\">\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map(item=> (\n          <Grid item key={item.id} xs={12} sm={4}>\n            <Item item={item} handleAddToCart={handleAddToCart} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {QueryClient, QueryClientProvider} from 'react-query'\n\nconst client = new QueryClient()\n\nReactDOM.render(\n  <QueryClientProvider client={client}>\n    <App />\n  </QueryClientProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}